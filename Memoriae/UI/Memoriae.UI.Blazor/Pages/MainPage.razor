@page "/mainPage/{SearchText}"
@using Microsoft.AspNetCore.Components;
@inject Microsoft.AspNetCore.Components.NavigationManager nav

<AuthorizeView>
    <Authorized>
        @if (LoaderVisible)
        {
            <Loader></Loader>
        }
        else
        {
            <div class="leftpanel">
                <Logo Aligment=@Aligment.Top></Logo>                                
            </div>
            <div class="middlepanel">
                <div class="inputWithIcon">
                    <input type="search" placeholder="Для поиска по тегам, текстам или заголовкам введите их через пробел" class="searchTextBox"
                            value="@SearchText" @oninput="@OnInput" @onkeydown="@DoSearchAsync" />
                    <i class="material-icons" style="margin-top: -10px; margin-left: -10px; ">search</i>
                </div>                
            </div>
            <div class="rightpanel">
                <Menu></Menu>
            </div>
            <div class="leftpanel">                
            </div>
            <div class="middlepanel">
                @if (!postList.Any())
                {
                    <i class="nothingToSee">Пока ничего нет</i>
                }
                else
                {
                    @foreach (var post in postList)
                    {
                        <a class="clickablePost" href="read/@post.Id">
                            <PostPreview OnTagClicked="@TriggerTagSearch" Post="post"></PostPreview>
                        </a>
                    }
                }
            </div>
            <div class="rightpanel">                
            </div>

        }
    </Authorized>
    <NotAuthorized>
        <Login></Login>
    </NotAuthorized>
</AuthorizeView>


@code{

    [Inject]
    public IPostManager PostManager { get; set; }

    [Parameter]
    public string SearchText { get; set; }

    public bool LoaderVisible { get; set; } = true;

    private IEnumerable<PostRead> postList = new List<PostRead>();

    protected override async Task OnInitializedAsync()
    {
        var postsInDb = await PostManager.GetAsync().ConfigureAwait(false);
        postList = postsInDb.Select(postInDb => new PostRead
        {
            Id = postInDb.Id,
            Title = postInDb.Title,
            PreviewText = postInDb.PreviewText,
            CreateDateTime = postInDb.CreateDateTime.GetValueOrDefault(),
            Tags = postInDb.Tags.Select(x => new Tag { Id = x.Id, Name = x.Name })
        });
        if (!string.IsNullOrEmpty(SearchText)) await SearchAsync().ConfigureAwait(false); 
        CancelLoader();
    }

    protected void CancelLoader() => LoaderVisible = false;

    protected void StartLoader() => LoaderVisible = true;

    private async Task OnInput(ChangeEventArgs args)
    {
        SearchText = args.Value.ToString();
        if(string.IsNullOrEmpty(SearchText))
            await SearchAsync().ConfigureAwait(false);
    }

    public async Task DoSearchAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SearchAsync().ConfigureAwait(false);
        }
    }

    private async Task SearchAsync()
    {        
        StartLoader();
        var foundedPosts = await PostManager.SearchAsync(SearchText).ConfigureAwait(false);
        postList = foundedPosts.Select(postInDb => new PostRead
        {
            Id = postInDb.Id,
            Title = postInDb.Title,
            PreviewText = postInDb.PreviewText,
            CreateDateTime = postInDb.CreateDateTime.GetValueOrDefault(),
            Tags = postInDb.Tags.Select(x => new Tag { Id = x.Id, Name = x.Name })
        });
        CancelLoader();        
    }

    private void TriggerTagSearch(string tagName)
    {
        nav.NavigateTo($"/mainPage/{tagName}", true);
    }
}